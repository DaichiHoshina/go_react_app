# version: 2
# jobs:
#   build:
#     working_directory: ~/backend
#     docker:
#       - image: circleci/golang:latest
#     steps:
#       - checkout
#       - run: go mod init github.com/DaichiHoshina/go_react_app/backend
#       - run: go mod download
#       #   # - restore_cache:
#       #   #     keys:
#       #   #       - go-mod-v4-{{ checksum "go.sum" }}
#       - run: ls
#       # - run: go get
#       # - run: go test
#       # - run: go build main.go
#       - store_artifacts:
#           path: main
#           destination: main
#       # - save_cache:
#       #     key: go-mod-v4-{{ checksum "go.sum" }}
#       #     paths:
#       #       - $GOPATH/pkg/mod
#   build_image:
#     docker:
#       - image: docker:18.09.0
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: install aws cli
#           command: |
#             apk add --no-cache --update py-pip
#             pip install awscli
#       - run:
#           name: build image
#           command: |
#             $(aws ecr get-login --no-include-email --region ap-northeast-1)
#             docker build -t ${ECR_DOMAIN}:$CIRCLE_SHA1 -t ${ECR_DOMAIN}:latest .
#       - run:
#           name: Push docker image
#           command: |
#             docker push ${ECR_DOMAIN}:$CIRCLE_SHA1
#             docker push ${ECR_DOMAIN}:latest
#   # deploy:
#   #   docker:
#   #     - image: circleci/python:3.7
#   #   steps:
#   #     - run:
#   #         name: install aws cli
#   #         command: |
#   #           sudo pip install awscli
#   #     - run:
#   #         name: download jq
#   #         command: |
#   #           wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
#   #           mv jq-linux64 jq
#   #     - run:
#   #         name: login
#   #         command: |
#   #           $(aws ecr get-login --no-include-email --region ap-northeast-1)
#   #     - run:
#   #         name: deploy
#   #         command: |
#   #           aws ecs describe-task-definition --task-definition webapp-service | jq  '.taskDefinition | { containerDefinitions: .containerDefinitions }' > definition.json
#   #           aws ecs register-task-definition --execution-role-arn roleのarn --family webapp-service --cli-input-json file://definition.json
#   #           aws ecs update-service --cluster sample-ecs-cluster --service webapp-service --task-definition webapp-service
#   #     - run:
#   #         name: migration
#   #         command: |
#   #           aws ecs run-task --cluster sample-ecs-cluster --task-definition webapp-migration
# workflows:
#   version: 2
#   test:
#     jobs:
#       - build
#       - build_image:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master
#       # - deploy:
#       #     requires:
#       #       - build_image
#       #     filters:
#       #       branches:
#       #         only: master
# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.0.0
  aws-ecs: circleci/aws-ecs@1.1.0

jobs:
#   test:
#     machine: true

#     steps:
#       - checkout
# - run:
#     name: create docker network
#     command: docker network create test-network
# - run:
#     name: コンテナ起動
#     command: docker-compose up -d
# - run:
#     name: 静的デバッグ
#     command: make lint
# - run:
#     name: テスト
#     command: make test

workflows:
  version: 2
  workflow:
    jobs:
      # - test
      # dockerイメージのビルド & ECRへプッシュ
      - aws-ecr/build-and-push-image:
          # テストをパスしたら実行
          # requires:
          #   - test
          filters:
            branches:
              only: master
          working_directory: ~/backend
          region: AWS_DEFAULT_REGION
          account-url: AWS_ECR_ACCOUNT_URL
          repo: ${ECR_DOMAIN}
          tag: "${CIRCLE_SHA1}"
      # - aws-ecs/deploy-service-update:
      #     # イメージのビルド & プッシュが成功したら実行
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     filters:
      #       branches:
      #         only: master
      #     aws-region: ${AWS_REGION}
      #     family: ${ECS_SERVICE}
      #     cluster-name: "${ECS_CLUSTER}"
      #     container-image-name-updates: "container=${ECS_SERVICE},image-and-tag=${AWS_ECR_ACCOUNT_URL}/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"
