version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1

jobs:
  test:
    machine: true

    steps:
      - checkout
      # - run:
      #     name: install yarn
      #     command: npm install -g yarn
      #     working_directory: front
      # - run:
      #     name: yarn upgrade
      #     command: yarn upgrade --ignore-engines
      #     working_directory: front
      # - restore_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      # - run:
      #     name: yarn build
      #     command: yarn build --ignore-engines
      #     working_directory: front
      # - save_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      #     paths:
      #       - ./node_modules
      # - run:
      #     name: test
      #     command: npm test
      #     background: true
      #     working_directory: front
      - run:
          name: Run the application
          command: yarn start
          background: true
      # - run:
      #     name: create docker network
      #     command: docker network create test-network
      # - run:
      #     name: コンテナ起動
      #     command: docker-compose up -d
      # - run:
      #     name: 静的デバッグ
      #     command: make lint
      # - run:
      #     name: テスト
      #     command: make test
  # deploy:
  #   docker:
  #     - image: circleci/python:3.7
  #   steps:
  #     - run:
  #         name: install aws cli
  #         command: |
  #           sudo pip install awscli
  #     - run:
  #         name: download jq
  #         command: |
  #           wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
  #           mv jq-linux64 jq
  #     - run:
  #         name: login
  #         command: |
  #           $(aws ecr get-login --no-include-email --region ap-northeast-1)
  #     - run:
  #         name: front-deploy
  #         command: |
  #           aws ecs describe-task-definition --task-definition webapp-servi ce | jq '.taskDefinition | { containerDefinitions: .containerDefinitions ' > definition.json}
  #           aws ecs register-task-definition --execution-role-arn arn:aws:iam:: 262576183096:role/ecs-task-role --family webapp-service --cli-input-json file:/ /definition.json
  #           aws ecs update-service --cluster repgram-front --service webap p-service --task-definition webapp-service
  #     - run:
  #         name: backend-deploy
  #         command: |
  #           aws ecs describe-task-definition --task-definition webapp-servi ce | jq '.backendTaskdefinition | { containerDefinitions: .containerDefinitions ' > backendDefinition.json}
  #           aws ecs register-task-definition --execution-role-arn arn:aws:iam:: 262576183096:role/ecs-task-role --family backend-service --cli-input-json file:/ /backendDefinition.json
  #           aws ecs update-service --cluster repgram-backend --service webap p-service --task-definition backend-service

workflows:
  version: 2
  workflow:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          requires:
            - test
          filters:
            branches:
              only: master
          region: AWS_DEFAULT_REGION
          account-url: AWS_ECR_ACCOUNT_URL
          repo: ${FRONT_REPO}
          tag: "latest"
          dockerfile: ./front/Dockerfile_prd
      # - aws-ecs/deploy-service-update:
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     filters:
      #       branches:
      #         only: master
      #     family: ${FRONT_ECS_SERVICE}
      #     cluster-name: '${FRONT_ECS_CLUSTER}'
      #     container-image-name-updates: 'container=${FRONT_ECS_SERVICE},image-and-tag=${AWS_ECR_ACCOUNT_URL}/${FRONT_REPO}:latest'
      - aws-ecr/build-and-push-image:
          requires:
            - test
          filters:
            branches:
              only: master
          region: AWS_DEFAULT_REGION
          account-url: AWS_ECR_ACCOUNT_URL
          repo: ${BACKEND_REPO}
          tag: "latest"
          dockerfile: ./backend/Dockerfile_prd
      # - deploy:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master
      # - aws-ecs/deploy-service-update:
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     filters:
      #       branches:
      #         only: master
      #     family: ${BACKEND_ECS_SERVICE}
      #     cluster-name: '${BACKEND_ECS_CLUSTER}'
      #     container-image-name-updates: 'container=${BACKEND_ECS_SERVICE},image-and-tag=${AWS_ECR_ACCOUNT_URL}/${BACKEND_REPO}:latest'
